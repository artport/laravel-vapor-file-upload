window.Vapor=class{static async requestSignedUrl(e,t={}){return JSON.parse(await new Promise(function(s){let n=new XMLHttpRequest;n.open("POST","/vapor/signed-storage-url"),n.onload=()=>s(n.response),n.setRequestHeader("Content-Type","application/json"),n.setRequestHeader("X-Requested-With","XMLHttpRequest"),n.setRequestHeader("X-CSRF-TOKEN",document.querySelector('meta[name="csrf-token"]').getAttribute("content")),n.send(JSON.stringify({bucket:t.bucket||"",content_type:t.contentType||e.type,expires:t.expires||"",visibility:t.visibility||"public-read"}))}))}static async sendFile(e,t,s={},n={}){return await new Promise(function(r){let o=new XMLHttpRequest;o.open("PUT",e),o.onload=()=>r(o.response),s.progress&&(o.upload.onprogress=e=>s.progress(Math.ceil(e.loaded/e.total*100)));for(const e in n)o.setRequestHeader(e,n[e]);o.setRequestHeader("X-Requested-With","XMLHttpRequest"),o.setRequestHeader("X-CSRF-TOKEN",document.querySelector('meta[name="csrf-token"]').getAttribute("content")),o.setRequestHeader("Content-Type",s.contentType||t.type),o.send(t)})}static async store(e,t={}){let s=await this.requestSignedUrl(e,t);return"Host"in s.headers&&delete s.headers.Host,"Content-Type"in s.headers&&delete s.headers["Content-Type"],await this.sendFile(s.url,e,t,s.headers),e.name&&(s.extension=e.name.split(".").pop()),s}};
//# sourceMappingURL=laravel-vapor-file-upload.min.modern.js.map
